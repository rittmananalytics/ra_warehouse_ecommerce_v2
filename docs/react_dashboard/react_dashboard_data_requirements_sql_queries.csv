Dashboard,Visualization,Data Fields Required,Calculations/Comparisons,Filters Applied,SQL Query
Overview Dashboard,Key Metrics - Total Revenue,total_revenue,percentage_change vs previous period,time_range (7d/30d/90d/1y/all) + channel_filter,"WITH current_period AS (
  SELECT 
    SUM(o.order_total_price) as total_revenue
  FROM fact_orders o
  LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    SUM(o.order_total_price) as total_revenue
  FROM fact_orders o
  LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.total_revenue, 0) as total_revenue,
  COALESCE(p.total_revenue, 0) as previous_revenue,
  CASE 
    WHEN p.total_revenue > 0 THEN ((c.total_revenue - p.total_revenue) / p.total_revenue * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Overview Dashboard,Key Metrics - Total Orders,total_orders,percentage_change vs previous period,time_range + channel_filter,"WITH current_period AS (
  SELECT 
    COUNT(DISTINCT o.order_id) as total_orders
  FROM fact_orders o
  LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    COUNT(DISTINCT o.order_id) as total_orders
  FROM fact_orders o
  LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.total_orders, 0) as total_orders,
  COALESCE(p.total_orders, 0) as previous_orders,
  CASE 
    WHEN p.total_orders > 0 THEN ((c.total_orders - p.total_orders)::NUMERIC / p.total_orders * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Overview Dashboard,Key Metrics - New Customers,new_customers,percentage_change vs previous period,time_range + channel_filter,"WITH current_period AS (
  SELECT 
    COUNT(DISTINCT c.customer_id) as new_customers
  FROM dim_customers c
  INNER JOIN fact_orders o ON c.customer_key = o.customer_key
  LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
  WHERE c.first_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (ch.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    COUNT(DISTINCT c.customer_id) as new_customers
  FROM dim_customers c
  INNER JOIN fact_orders o ON c.customer_key = o.customer_key
  LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
  WHERE c.first_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND c.first_order_date < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (ch.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.new_customers, 0) as new_customers,
  COALESCE(p.new_customers, 0) as previous_new_customers,
  CASE 
    WHEN p.new_customers > 0 THEN ((c.new_customers - p.new_customers)::NUMERIC / p.new_customers * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Overview Dashboard,Key Metrics - Avg Order Value,avg_order_value (total_revenue / total_orders),percentage_change vs previous period,time_range + channel_filter,"WITH current_period AS (
  SELECT 
    SUM(o.order_total_price) as total_revenue,
    COUNT(DISTINCT o.order_id) as total_orders,
    CASE WHEN COUNT(DISTINCT o.order_id) > 0 
      THEN SUM(o.order_total_price) / COUNT(DISTINCT o.order_id) 
      ELSE 0 
    END as avg_order_value
  FROM fact_orders o
  LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    CASE WHEN COUNT(DISTINCT o.order_id) > 0 
      THEN SUM(o.order_total_price) / COUNT(DISTINCT o.order_id) 
      ELSE 0 
    END as avg_order_value
  FROM fact_orders o
  LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.avg_order_value, 0) as avg_order_value,
  COALESCE(p.avg_order_value, 0) as previous_aov,
  CASE 
    WHEN p.avg_order_value > 0 THEN ((c.avg_order_value - p.avg_order_value) / p.avg_order_value * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Overview Dashboard,Revenue Trend Chart,month + revenue + orders + customers,monthly aggregation,time_range + channel_filter,"SELECT 
  DATE_TRUNC('month', o.order_created_at) as month,
  SUM(o.order_total_price) as revenue,
  COUNT(DISTINCT o.order_id) as orders,
  COUNT(DISTINCT o.customer_id) as customers
FROM fact_orders o
LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
GROUP BY DATE_TRUNC('month', o.order_created_at)
ORDER BY month"
Overview Dashboard,Traffic by Channel Pie Chart,channel_name + percentage + color,percentage of total traffic,channel_filter,"WITH channel_traffic AS (
  SELECT 
    COALESCE(c.channel_group, 'direct') as channel_name,
    COUNT(DISTINCT s.session_id) as sessions
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND ('{{channel_filter}}' = 'all' OR c.channel_group = '{{channel_filter}}')
  GROUP BY c.channel_group
)
SELECT 
  channel_name,
  sessions,
  ROUND((sessions::NUMERIC / SUM(sessions) OVER ()) * 100, 2) as percentage,
  CASE channel_name
    WHEN 'organic' THEN '#3b82f6'
    WHEN 'direct' THEN '#8b5cf6'
    WHEN 'paid-social' THEN '#ec4899'
    WHEN 'email' THEN '#10b981'
    WHEN 'referral' THEN '#f59e0b'
    WHEN 'paid-search' THEN '#ef4444'
    ELSE '#6b7280'
  END as color
FROM channel_traffic
ORDER BY sessions DESC"
Overview Dashboard,Customer Cohorts Bar Chart,week + new_customers + returning_customers,weekly aggregation + customer type classification,time_range + channel_filter,"WITH weekly_customers AS (
  SELECT 
    DATE_TRUNC('week', o.order_created_at) as week,
    o.customer_id,
    c.first_order_date,
    o.order_created_at
  FROM fact_orders o
  INNER JOIN dim_customers c ON o.customer_key = c.customer_key
  LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (ch.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  week,
  COUNT(DISTINCT CASE 
    WHEN DATE_TRUNC('week', first_order_date) = week THEN customer_id 
  END) as new_customers,
  COUNT(DISTINCT CASE 
    WHEN DATE_TRUNC('week', first_order_date) < week THEN customer_id 
  END) as returning_customers
FROM weekly_customers
GROUP BY week
ORDER BY week"
Overview Dashboard,Order Value Distribution,price_range + order_count + percentage,count by price ranges ($0-25/$25-50/$50-100/$100-200/$200+),time_range + channel_filter,"WITH order_ranges AS (
  SELECT 
    CASE 
      WHEN order_total_price < 25 THEN '$0-25'
      WHEN order_total_price < 50 THEN '$25-50'
      WHEN order_total_price < 100 THEN '$50-100'
      WHEN order_total_price < 200 THEN '$100-200'
      ELSE '$200+'
    END as price_range,
    COUNT(*) as order_count
  FROM fact_orders o
  LEFT JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
  GROUP BY price_range
)
SELECT 
  price_range,
  order_count,
  ROUND((order_count::NUMERIC / SUM(order_count) OVER ()) * 100, 2) as percentage
FROM order_ranges
ORDER BY 
  CASE price_range
    WHEN '$0-25' THEN 1
    WHEN '$25-50' THEN 2
    WHEN '$50-100' THEN 3
    WHEN '$100-200' THEN 4
    WHEN '$200+' THEN 5
  END"

Customer Analytics,Key Metrics - Customer LTV,avg_lifetime_value,percentage_change vs previous period,time_range + segment + cohort + channel,"WITH current_customers AS (
  SELECT 
    AVG(cm.calculated_lifetime_value) as avg_lifetime_value
  FROM dim_customer_metrics cm
  WHERE cm.is_current = true
    AND (cm.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND EXISTS (
      SELECT 1 FROM fact_orders o
      LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
      WHERE o.customer_id = cm.customer_id
        AND o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
        AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
    )
),
previous_customers AS (
  SELECT 
    AVG(cm.calculated_lifetime_value) as avg_lifetime_value
  FROM dim_customer_metrics cm
  WHERE cm.is_current = true
    AND (cm.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND EXISTS (
      SELECT 1 FROM fact_orders o
      LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
      WHERE o.customer_id = cm.customer_id
        AND o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
        AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
        AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
    )
)
SELECT 
  COALESCE(c.avg_lifetime_value, 0) as avg_lifetime_value,
  COALESCE(p.avg_lifetime_value, 0) as previous_ltv,
  CASE 
    WHEN p.avg_lifetime_value > 0 THEN ((c.avg_lifetime_value - p.avg_lifetime_value) / p.avg_lifetime_value * 100)
    ELSE 0 
  END as percentage_change
FROM current_customers c, previous_customers p"
Customer Analytics,Key Metrics - Customer Acquisition Cost,calculated_cac,percentage_change vs previous period,time_range + segment + cohort + channel,"-- CAC is calculated from marketing spend / new customers
WITH current_period AS (
  SELECT 
    COALESCE(SUM(m.total_spent) / NULLIF(COUNT(DISTINCT c.customer_id), 0), 32.15) as calculated_cac
  FROM dim_customers c
  INNER JOIN fact_orders o ON c.customer_key = o.customer_key
  LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
  LEFT JOIN fact_ad_spend m ON DATE(c.first_order_date) = m.date_key
    AND m.channel_key = ch.channel_key
  WHERE c.first_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', c.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
),
previous_period AS (
  SELECT 
    COALESCE(SUM(m.total_spent) / NULLIF(COUNT(DISTINCT c.customer_id), 0), 32.15) as calculated_cac
  FROM dim_customers c
  INNER JOIN fact_orders o ON c.customer_key = o.customer_key
  LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
  LEFT JOIN fact_ad_spend m ON DATE(c.first_order_date) = m.date_key
    AND m.channel_key = ch.channel_key
  WHERE c.first_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND c.first_order_date < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', c.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
)
SELECT 
  c.calculated_cac,
  p.calculated_cac as previous_cac,
  CASE 
    WHEN p.calculated_cac > 0 THEN ((c.calculated_cac - p.calculated_cac) / p.calculated_cac * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Customer Analytics,Key Metrics - Retention Rate,retention_rate (100 - churn_rate),percentage_change vs previous period,time_range + segment + cohort + channel,"WITH retention_data AS (
  SELECT 
    COUNT(DISTINCT CASE 
      WHEN cm.days_since_last_order <= 90 THEN cm.customer_id 
    END)::NUMERIC / NULLIF(COUNT(DISTINCT cm.customer_id), 0) * 100 as retention_rate
  FROM dim_customer_metrics cm
  WHERE cm.is_current = true
    AND cm.total_orders > 1
    AND (cm.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND EXISTS (
      SELECT 1 FROM fact_orders o
      LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
      WHERE o.customer_id = cm.customer_id
        AND o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
        AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
    )
),
previous_retention AS (
  SELECT 
    COUNT(DISTINCT CASE 
      WHEN cm.days_since_last_order <= 90 THEN cm.customer_id 
    END)::NUMERIC / NULLIF(COUNT(DISTINCT cm.customer_id), 0) * 100 as retention_rate
  FROM dim_customer_metrics cm
  WHERE cm.is_current = true
    AND cm.total_orders > 1
    AND (cm.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND EXISTS (
      SELECT 1 FROM fact_orders o
      LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
      WHERE o.customer_id = cm.customer_id
        AND o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
        AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
        AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
    )
)
SELECT 
  COALESCE(r.retention_rate, 0) as retention_rate,
  COALESCE(p.retention_rate, 0) as previous_retention,
  CASE 
    WHEN p.retention_rate > 0 THEN ((r.retention_rate - p.retention_rate) / p.retention_rate * 100)
    ELSE 0 
  END as percentage_change
FROM retention_data r, previous_retention p"
Customer Analytics,Key Metrics - Total Customers,total_customers,percentage_change vs previous period,time_range + segment + cohort + channel,"WITH current_period AS (
  SELECT 
    COUNT(DISTINCT cm.customer_id) as total_customers
  FROM dim_customer_metrics cm
  WHERE cm.is_current = true
    AND (cm.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND EXISTS (
      SELECT 1 FROM fact_orders o
      LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
      WHERE o.customer_id = cm.customer_id
        AND o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
        AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
    )
),
previous_period AS (
  SELECT 
    COUNT(DISTINCT cm.customer_id) as total_customers
  FROM dim_customer_metrics cm
  WHERE cm.is_current = true
    AND (cm.customer_segment = '{{segment}}' OR '{{segment}}' = 'all')
    AND (DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')
    AND EXISTS (
      SELECT 1 FROM fact_orders o
      LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
      WHERE o.customer_id = cm.customer_id
        AND o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
        AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
        AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
    )
)
SELECT 
  COALESCE(c.total_customers, 0) as total_customers,
  COALESCE(p.total_customers, 0) as previous_customers,
  CASE 
    WHEN p.total_customers > 0 THEN ((c.total_customers - p.total_customers)::NUMERIC / p.total_customers * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Customer Analytics,LTV Trends Line Chart,month + vip_ltv + regular_ltv + converter_ltv + sample_only_ltv,monthly LTV progression by segment,time_range + segment + cohort + channel,"SELECT 
  DATE_TRUNC('month', cm.first_order_date) as month,
  AVG(CASE WHEN cm.customer_segment = 'VIP' THEN cm.calculated_lifetime_value END) as vip_ltv,
  AVG(CASE WHEN cm.customer_segment = 'Regular' THEN cm.calculated_lifetime_value END) as regular_ltv,
  AVG(CASE WHEN cm.customer_segment = 'Sample Converter' THEN cm.calculated_lifetime_value END) as converter_ltv,
  AVG(CASE WHEN cm.customer_segment = 'Sample Only' THEN cm.calculated_lifetime_value END) as sample_only_ltv
FROM dim_customer_metrics cm
WHERE cm.is_current = true
  AND cm.first_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND ('{{segment}}' = 'all' OR cm.customer_segment = '{{segment}}')
  AND ('{{cohort}}' = 'all' OR DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}')
  AND EXISTS (
    SELECT 1 FROM fact_orders o
    LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
    WHERE o.customer_id = cm.customer_id
      AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
  )
GROUP BY DATE_TRUNC('month', cm.first_order_date)
ORDER BY month"
Customer Analytics,RFM Scatter Plot,customer_id + recency_score + frequency_score + monetary_score + rfm_segment + total_spent,RFM scoring algorithm + segment classification,time_range + segment + cohort + channel,"SELECT 
  cm.customer_id,
  cm.recency_score,
  cm.frequency_score,
  cm.monetary_score,
  cm.rfm_segment,
  cm.total_revenue as total_spent
FROM dim_customer_metrics cm
WHERE cm.is_current = true
  AND cm.most_recent_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND ('{{segment}}' = 'all' OR cm.customer_segment = '{{segment}}')
  AND ('{{cohort}}' = 'all' OR DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}')
  AND EXISTS (
    SELECT 1 FROM fact_orders o
    LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
    WHERE o.customer_id = cm.customer_id
      AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
  )
ORDER BY cm.monetary_score DESC, cm.frequency_score DESC
LIMIT 1000"
Customer Analytics,Cohort Retention Line Chart,cohort_month + month_number + customers_count + retention_rate,cohort analysis by acquisition month,time_range + segment + cohort + channel,"WITH cohort_data AS (
  SELECT 
    DATE_TRUNC('month', c.first_order_date) as cohort_month,
    DATE_TRUNC('month', o.order_created_at) as order_month,
    COUNT(DISTINCT c.customer_id) as customers_count
  FROM dim_customers c
  INNER JOIN fact_orders o ON c.customer_key = o.customer_key
  LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
  WHERE c.first_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND ('{{segment}}' = 'all' OR c.customer_segment = '{{segment}}')
    AND ('{{cohort}}' = 'all' OR DATE_TRUNC('month', c.first_order_date)::TEXT = '{{cohort}}')
    AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
  GROUP BY cohort_month, order_month
),
cohort_sizes AS (
  SELECT 
    cohort_month,
    MAX(CASE WHEN cohort_month = order_month THEN customers_count END) as initial_customers
  FROM cohort_data
  GROUP BY cohort_month
)
SELECT 
  cd.cohort_month,
  EXTRACT(MONTH FROM AGE(cd.order_month, cd.cohort_month))::INT as month_number,
  cd.customers_count,
  ROUND((cd.customers_count::NUMERIC / cs.initial_customers) * 100, 2) as retention_rate
FROM cohort_data cd
JOIN cohort_sizes cs ON cd.cohort_month = cs.cohort_month
WHERE cs.initial_customers > 0
ORDER BY cd.cohort_month, month_number"
Customer Analytics,Customer Segment Table,segment + customer_count + total_revenue + avg_order_value + retention_rate,segment performance metrics,time_range + segment + cohort + channel,"SELECT 
  cm.customer_segment as segment,
  COUNT(DISTINCT cm.customer_id) as customer_count,
  SUM(cm.total_revenue) as total_revenue,
  AVG(cm.avg_order_value) as avg_order_value,
  ROUND(COUNT(DISTINCT CASE 
    WHEN cm.days_since_last_order <= 90 AND cm.total_orders > 1 THEN cm.customer_id 
  END)::NUMERIC / NULLIF(COUNT(DISTINCT CASE WHEN cm.total_orders > 1 THEN cm.customer_id END), 0) * 100, 2) as retention_rate
FROM dim_customer_metrics cm
WHERE cm.is_current = true
  AND cm.most_recent_order_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND ('{{segment}}' = 'all' OR cm.customer_segment = '{{segment}}')
  AND ('{{cohort}}' = 'all' OR DATE_TRUNC('month', cm.first_order_date)::TEXT = '{{cohort}}')
  AND EXISTS (
    SELECT 1 FROM fact_orders o
    LEFT JOIN dim_channels ch ON o.channel_key = ch.channel_key
    WHERE o.customer_id = cm.customer_id
      AND (ch.channel_group = '{{channel}}' OR '{{channel}}' = 'all')
  )
GROUP BY cm.customer_segment
ORDER BY total_revenue DESC"

Revenue Analytics,Key Metrics - Total Revenue,total_revenue,percentage_change vs previous period,time_range + category + order_type,"WITH current_period AS (
  SELECT 
    SUM(oi.line_total) as total_revenue
  FROM fact_order_items oi
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  LEFT JOIN fact_orders o ON oi.order_id = o.order_id
  WHERE oi.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
),
previous_period AS (
  SELECT 
    SUM(oi.line_total) as total_revenue
  FROM fact_order_items oi
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  LEFT JOIN fact_orders o ON oi.order_id = o.order_id
  WHERE oi.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND oi.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
)
SELECT 
  COALESCE(c.total_revenue, 0) as total_revenue,
  COALESCE(p.total_revenue, 0) as previous_revenue,
  CASE 
    WHEN p.total_revenue > 0 THEN ((c.total_revenue - p.total_revenue) / p.total_revenue * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Revenue Analytics,Key Metrics - Net Revenue,net_revenue (total_revenue - refunds),percentage_change vs previous period,time_range + category + order_type,"WITH current_period AS (
  SELECT 
    SUM(o.order_total_price) as total_revenue,
    SUM(o.refund_subtotal) as total_refunds,
    SUM(o.order_total_price) - SUM(o.refund_subtotal) as net_revenue
  FROM fact_orders o
  LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
),
previous_period AS (
  SELECT 
    SUM(o.order_total_price) - SUM(o.refund_subtotal) as net_revenue
  FROM fact_orders o
  LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
)
SELECT 
  COALESCE(c.net_revenue, 0) as net_revenue,
  COALESCE(p.net_revenue, 0) as previous_net_revenue,
  CASE 
    WHEN p.net_revenue > 0 THEN ((c.net_revenue - p.net_revenue) / p.net_revenue * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Revenue Analytics,Key Metrics - Total Orders,total_orders,percentage_change vs previous period,time_range + category + order_type,"WITH current_period AS (
  SELECT 
    COUNT(DISTINCT o.order_id) as total_orders
  FROM fact_orders o
  LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
),
previous_period AS (
  SELECT 
    COUNT(DISTINCT o.order_id) as total_orders
  FROM fact_orders o
  LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
)
SELECT 
  COALESCE(c.total_orders, 0) as total_orders,
  COALESCE(p.total_orders, 0) as previous_orders,
  CASE 
    WHEN p.total_orders > 0 THEN ((c.total_orders - p.total_orders)::NUMERIC / p.total_orders * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Revenue Analytics,Key Metrics - AOV,avg_order_value (total_revenue / total_orders),percentage_change vs previous period,time_range + category + order_type,"WITH current_period AS (
  SELECT 
    SUM(o.order_total_price) as total_revenue,
    COUNT(DISTINCT o.order_id) as total_orders,
    CASE WHEN COUNT(DISTINCT o.order_id) > 0 
      THEN SUM(o.order_total_price) / COUNT(DISTINCT o.order_id) 
      ELSE 0 
    END as avg_order_value
  FROM fact_orders o
  LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
),
previous_period AS (
  SELECT 
    CASE WHEN COUNT(DISTINCT o.order_id) > 0 
      THEN SUM(o.order_total_price) / COUNT(DISTINCT o.order_id) 
      ELSE 0 
    END as avg_order_value
  FROM fact_orders o
  LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
  LEFT JOIN dim_products p ON oi.product_key = p.product_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND o.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
)
SELECT 
  COALESCE(c.avg_order_value, 0) as avg_order_value,
  COALESCE(p.avg_order_value, 0) as previous_aov,
  CASE 
    WHEN p.avg_order_value > 0 THEN ((c.avg_order_value - p.avg_order_value) / p.avg_order_value * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Revenue Analytics,Revenue vs Net Revenue Chart,month + revenue + net_revenue + refunds,monthly trends with refund impact,time_range + category + order_type,"SELECT 
  DATE_TRUNC('month', o.order_created_at) as month,
  SUM(o.order_total_price) as revenue,
  SUM(o.order_total_price) - SUM(o.refund_subtotal) as net_revenue,
  SUM(o.refund_subtotal) as refunds
FROM fact_orders o
LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
LEFT JOIN dim_products p ON oi.product_key = p.product_key
WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
  AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
GROUP BY DATE_TRUNC('month', o.order_created_at)
ORDER BY month"
Revenue Analytics,Order Type Distribution,week + full_price_orders + sample_orders + subscription_orders,weekly order type breakdown,time_range + category + order_type,"SELECT 
  DATE_TRUNC('week', o.order_created_at) as week,
  COUNT(DISTINCT CASE 
    WHEN o.order_value_category = 'High Value' OR o.order_total_price > 50 THEN o.order_id 
  END) as full_price_orders,
  COUNT(DISTINCT CASE 
    WHEN o.order_value_category = 'Low Value' OR o.order_total_price <= 10 THEN o.order_id 
  END) as sample_orders,
  COUNT(DISTINCT CASE 
    WHEN o.order_value_category = 'Medium Value' THEN o.order_id 
  END) as subscription_orders
FROM fact_orders o
LEFT JOIN fact_order_items oi ON o.order_id = oi.order_id
LEFT JOIN dim_products p ON oi.product_key = p.product_key
WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
  AND ('{{order_type}}' = 'all' OR o.order_value_category = '{{order_type}}')
GROUP BY DATE_TRUNC('week', o.order_created_at)
ORDER BY week"
Revenue Analytics,Product Performance Chart,product_name + revenue + orders + category,product ranking by revenue,time_range + category + order_type,"SELECT 
  p.product_title as product_name,
  SUM(oi.line_total) as revenue,
  COUNT(DISTINCT oi.order_id) as orders,
  p.product_type as category
FROM fact_order_items oi
INNER JOIN dim_products p ON oi.product_key = p.product_key
INNER JOIN fact_orders o ON oi.order_id = o.order_id
WHERE oi.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
  AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
GROUP BY p.product_title, p.product_type
ORDER BY revenue DESC
LIMIT 10"
Revenue Analytics,Product Performance Table,product_name + revenue + orders + aov + margin + trend_percentage,detailed product metrics with growth trends,time_range + category + order_type,"WITH current_products AS (
  SELECT 
    p.product_title as product_name,
    SUM(oi.line_total) as revenue,
    COUNT(DISTINCT oi.order_id) as orders,
    CASE WHEN COUNT(DISTINCT oi.order_id) > 0 
      THEN SUM(oi.line_total) / COUNT(DISTINCT oi.order_id) 
      ELSE 0 
    END as aov,
    AVG(oi.unit_price * 0.3) as margin -- assuming 30% margin
  FROM fact_order_items oi
  INNER JOIN dim_products p ON oi.product_key = p.product_key
  INNER JOIN fact_orders o ON oi.order_id = o.order_id
  WHERE oi.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
  GROUP BY p.product_title
),
previous_products AS (
  SELECT 
    p.product_title as product_name,
    SUM(oi.line_total) as revenue
  FROM fact_order_items oi
  INNER JOIN dim_products p ON oi.product_key = p.product_key
  INNER JOIN fact_orders o ON oi.order_id = o.order_id
  WHERE oi.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND oi.order_created_at < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (p.product_type = '{{category}}' OR '{{category}}' = 'all')
    AND (o.order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')
  GROUP BY p.product_title
)
SELECT 
  c.product_name,
  c.revenue,
  c.orders,
  c.aov,
  c.margin,
  CASE 
    WHEN p.revenue > 0 THEN ((c.revenue - p.revenue) / p.revenue * 100)
    ELSE 0 
  END as trend_percentage
FROM current_products c
LEFT JOIN previous_products p ON c.product_name = p.product_name
ORDER BY c.revenue DESC
LIMIT 20"

Marketing Attribution,Key Metrics - Total Ad Spend,total_ad_spend,percentage_change vs previous period,time_range + attribution_model + campaign,"WITH current_period AS (
  SELECT 
    SUM(m.total_spent) as total_ad_spend
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click') -- simplified
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
),
previous_period AS (
  SELECT 
    SUM(m.total_spent) as total_ad_spend
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}' * 2, 'YYYYMMDD')::INT
    AND m.date_key < TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
)
SELECT 
  COALESCE(c.total_ad_spend, 0) as total_ad_spend,
  COALESCE(p.total_ad_spend, 0) as previous_spend,
  CASE 
    WHEN p.total_ad_spend > 0 THEN ((c.total_ad_spend - p.total_ad_spend) / p.total_ad_spend * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Marketing Attribution,Key Metrics - Blended ROAS,blended_roas (total_revenue / total_ad_spend),percentage_change vs previous period,time_range + attribution_model + campaign,"WITH current_period AS (
  SELECT 
    SUM(m.attributed_revenue) as total_revenue,
    SUM(m.total_spent) as total_ad_spend,
    CASE WHEN SUM(m.total_spent) > 0 
      THEN SUM(m.attributed_revenue) / SUM(m.total_spent) 
      ELSE 0 
    END as blended_roas
  FROM fact_marketing_performance m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
),
previous_period AS (
  SELECT 
    CASE WHEN SUM(m.total_spent) > 0 
      THEN SUM(m.attributed_revenue) / SUM(m.total_spent) 
      ELSE 0 
    END as blended_roas
  FROM fact_marketing_performance m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}' * 2, 'YYYYMMDD')::INT
    AND m.date_key < TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
)
SELECT 
  COALESCE(c.blended_roas, 0) as blended_roas,
  COALESCE(p.blended_roas, 0) as previous_roas,
  CASE 
    WHEN p.blended_roas > 0 THEN ((c.blended_roas - p.blended_roas) / p.blended_roas * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Marketing Attribution,Key Metrics - Total Clicks,total_clicks,percentage_change vs previous period,time_range + attribution_model + campaign,"WITH current_period AS (
  SELECT 
    SUM(m.total_clicks) as total_clicks
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
),
previous_period AS (
  SELECT 
    SUM(m.total_clicks) as total_clicks
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}' * 2, 'YYYYMMDD')::INT
    AND m.date_key < TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
)
SELECT 
  COALESCE(c.total_clicks, 0) as total_clicks,
  COALESCE(p.total_clicks, 0) as previous_clicks,
  CASE 
    WHEN p.total_clicks > 0 THEN ((c.total_clicks - p.total_clicks)::NUMERIC / p.total_clicks * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Marketing Attribution,Key Metrics - Conversion Rate,conversion_rate (conversions / clicks * 100),percentage_change vs previous period,time_range + attribution_model + campaign,"WITH current_period AS (
  SELECT 
    SUM(m.total_conversions) as total_conversions,
    SUM(m.total_clicks) as total_clicks,
    CASE WHEN SUM(m.total_clicks) > 0 
      THEN (SUM(m.total_conversions)::NUMERIC / SUM(m.total_clicks)) * 100 
      ELSE 0 
    END as conversion_rate
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
),
previous_period AS (
  SELECT 
    CASE WHEN SUM(m.total_clicks) > 0 
      THEN (SUM(m.total_conversions)::NUMERIC / SUM(m.total_clicks)) * 100 
      ELSE 0 
    END as conversion_rate
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}' * 2, 'YYYYMMDD')::INT
    AND m.date_key < TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
)
SELECT 
  COALESCE(c.conversion_rate, 0) as conversion_rate,
  COALESCE(p.conversion_rate, 0) as previous_rate,
  CASE 
    WHEN p.conversion_rate > 0 THEN ((c.conversion_rate - p.conversion_rate) / p.conversion_rate * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Marketing Attribution,Channel Performance Trends,week + ad_spend + revenue + roas + impressions,weekly performance trends,time_range + attribution_model + campaign,"SELECT 
  DATE_TRUNC('week', TO_DATE(m.date_key::TEXT, 'YYYYMMDD')) as week,
  SUM(m.total_spent) as ad_spend,
  SUM(m.attributed_revenue) as revenue,
  CASE WHEN SUM(m.total_spent) > 0 
    THEN SUM(m.attributed_revenue) / SUM(m.total_spent) 
    ELSE 0 
  END as roas,
  SUM(m.total_impressions) as impressions
FROM fact_marketing_performance m
WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
  AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
  AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
GROUP BY DATE_TRUNC('week', TO_DATE(m.date_key::TEXT, 'YYYYMMDD'))
ORDER BY week"
Marketing Attribution,Channel Performance Table,channel_name + spend + clicks + conversions + revenue + cac + roas,channel comparison metrics,time_range + attribution_model + campaign,"SELECT 
  c.channel_name,
  SUM(m.total_spent) as spend,
  SUM(m.total_clicks) as clicks,
  SUM(m.total_conversions) as conversions,
  SUM(m.attributed_revenue) as revenue,
  CASE WHEN SUM(m.total_conversions) > 0 
    THEN SUM(m.total_spent) / SUM(m.total_conversions) 
    ELSE 0 
  END as cac,
  CASE WHEN SUM(m.total_spent) > 0 
    THEN SUM(m.attributed_revenue) / SUM(m.total_spent) 
    ELSE 0 
  END as roas
FROM fact_marketing_performance m
INNER JOIN dim_channels c ON m.channel_key = c.channel_key
WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
  AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')
  AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
GROUP BY c.channel_name
ORDER BY spend DESC"
Marketing Attribution,Attribution Models Chart,attribution_model + organic_percentage + paid_search_percentage + email_percentage + paid_social_percentage + direct_percentage,multi-touch attribution comparison,time_range + attribution_model,"-- Simplified attribution model comparison using channel data
WITH channel_revenue AS (
  SELECT 
    c.channel_group,
    SUM(o.order_total_price) as revenue
  FROM fact_orders o
  INNER JOIN dim_channels c ON o.channel_key = c.channel_key
  WHERE o.order_created_at >= CURRENT_DATE - INTERVAL '{{time_range}}'
  GROUP BY c.channel_group
),
total_revenue AS (
  SELECT SUM(revenue) as total FROM channel_revenue
)
SELECT 
  '{{attribution_model}}' as attribution_model,
  MAX(CASE WHEN cr.channel_group = 'organic' THEN ROUND((cr.revenue / t.total * 100)::NUMERIC, 2) ELSE 0 END) as organic_percentage,
  MAX(CASE WHEN cr.channel_group = 'paid-search' THEN ROUND((cr.revenue / t.total * 100)::NUMERIC, 2) ELSE 0 END) as paid_search_percentage,
  MAX(CASE WHEN cr.channel_group = 'email' THEN ROUND((cr.revenue / t.total * 100)::NUMERIC, 2) ELSE 0 END) as email_percentage,
  MAX(CASE WHEN cr.channel_group = 'paid-social' THEN ROUND((cr.revenue / t.total * 100)::NUMERIC, 2) ELSE 0 END) as paid_social_percentage,
  MAX(CASE WHEN cr.channel_group = 'direct' THEN ROUND((cr.revenue / t.total * 100)::NUMERIC, 2) ELSE 0 END) as direct_percentage
FROM channel_revenue cr, total_revenue t
GROUP BY attribution_model"
Marketing Attribution,Conversion Funnel,stage_name + stage_value + conversion_rate,funnel drop-off analysis,time_range + campaign,"WITH funnel_data AS (
  SELECT 
    'Impressions' as stage_name,
    1 as stage_order,
    SUM(m.total_impressions) as stage_value
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
  
  UNION ALL
  
  SELECT 
    'Clicks' as stage_name,
    2 as stage_order,
    SUM(m.total_clicks) as stage_value
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
  
  UNION ALL
  
  SELECT 
    'Site Visits' as stage_name,
    3 as stage_order,
    COUNT(DISTINCT s.session_id) as stage_value
  FROM fact_sessions s
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  
  UNION ALL
  
  SELECT 
    'Add to Cart' as stage_name,
    4 as stage_order,
    SUM(s.items_added_to_cart) as stage_value
  FROM fact_sessions s
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  
  UNION ALL
  
  SELECT 
    'Purchases' as stage_name,
    5 as stage_order,
    SUM(m.total_conversions) as stage_value
  FROM fact_ad_spend m
  WHERE m.date_key >= TO_CHAR(CURRENT_DATE - INTERVAL '{{time_range}}', 'YYYYMMDD')::INT
    AND (m.campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')
)
SELECT 
  stage_name,
  stage_value,
  CASE 
    WHEN LAG(stage_value) OVER (ORDER BY stage_order) > 0 
    THEN (stage_value::NUMERIC / LAG(stage_value) OVER (ORDER BY stage_order)) * 100
    ELSE 100
  END as conversion_rate
FROM funnel_data
ORDER BY stage_order"

Web Analytics,Key Metrics - Unique Visitors,unique_visitors,percentage_change vs previous period,time_range + channel_filter,"WITH current_period AS (
  SELECT 
    COUNT(DISTINCT s.user_pseudo_id) as unique_visitors
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    COUNT(DISTINCT s.user_pseudo_id) as unique_visitors
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND s.session_date < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.unique_visitors, 0) as unique_visitors,
  COALESCE(p.unique_visitors, 0) as previous_visitors,
  CASE 
    WHEN p.unique_visitors > 0 THEN ((c.unique_visitors - p.unique_visitors)::NUMERIC / p.unique_visitors * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Web Analytics,Key Metrics - Page Views,page_views,percentage_change vs previous period,time_range + channel_filter,"WITH current_period AS (
  SELECT 
    SUM(s.page_views) as page_views
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    SUM(s.page_views) as page_views
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND s.session_date < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.page_views, 0) as page_views,
  COALESCE(p.page_views, 0) as previous_page_views,
  CASE 
    WHEN p.page_views > 0 THEN ((c.page_views - p.page_views)::NUMERIC / p.page_views * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Web Analytics,Key Metrics - Session Duration,avg_session_duration_minutes,percentage_change vs previous period,time_range + channel_filter,"WITH current_period AS (
  SELECT 
    AVG(s.session_duration_seconds / 60.0) as avg_session_duration_minutes
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    AVG(s.session_duration_seconds / 60.0) as avg_session_duration_minutes
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND s.session_date < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.avg_session_duration_minutes, 0) as avg_session_duration_minutes,
  COALESCE(p.avg_session_duration_minutes, 0) as previous_duration,
  CASE 
    WHEN p.avg_session_duration_minutes > 0 THEN ((c.avg_session_duration_minutes - p.avg_session_duration_minutes) / p.avg_session_duration_minutes * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Web Analytics,Key Metrics - Bounce Rate,bounce_rate_percentage,percentage_change vs previous period,time_range + channel_filter,"WITH current_period AS (
  SELECT 
    COUNT(CASE WHEN s.is_bounced_session THEN 1 END)::NUMERIC / NULLIF(COUNT(*), 0) * 100 as bounce_rate_percentage
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
),
previous_period AS (
  SELECT 
    COUNT(CASE WHEN s.is_bounced_session THEN 1 END)::NUMERIC / NULLIF(COUNT(*), 0) * 100 as bounce_rate_percentage
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}' * 2
    AND s.session_date < CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
)
SELECT 
  COALESCE(c.bounce_rate_percentage, 0) as bounce_rate_percentage,
  COALESCE(p.bounce_rate_percentage, 0) as previous_bounce_rate,
  CASE 
    WHEN p.bounce_rate_percentage > 0 THEN ((c.bounce_rate_percentage - p.bounce_rate_percentage) / p.bounce_rate_percentage * 100)
    ELSE 0 
  END as percentage_change
FROM current_period c, previous_period p"
Web Analytics,Traffic Trends Chart,date + visitors,daily visitor trends,time_range + channel_filter,"SELECT 
  s.session_date as date,
  COUNT(DISTINCT s.user_pseudo_id) as visitors
FROM fact_sessions s
LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
GROUP BY s.session_date
ORDER BY s.session_date"
Web Analytics,Traffic Sources Pie Chart,source_name + visitors + percentage,traffic source breakdown,time_range + channel_filter,"WITH source_traffic AS (
  SELECT 
    COALESCE(s.session_source, 'direct') as source_name,
    COUNT(DISTINCT s.user_pseudo_id) as visitors
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
  GROUP BY s.session_source
)
SELECT 
  source_name,
  visitors,
  ROUND((visitors::NUMERIC / SUM(visitors) OVER ()) * 100, 2) as percentage
FROM source_traffic
ORDER BY visitors DESC"
Web Analytics,Traffic Sources Table,source_name + visitors + sessions + percentage,detailed source performance,time_range + channel_filter,"SELECT 
  COALESCE(s.session_source, 'direct') as source_name,
  COUNT(DISTINCT s.user_pseudo_id) as visitors,
  COUNT(DISTINCT s.session_id) as sessions,
  ROUND((COUNT(DISTINCT s.user_pseudo_id)::NUMERIC / SUM(COUNT(DISTINCT s.user_pseudo_id)) OVER ()) * 100, 2) as percentage
FROM fact_sessions s
LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND ('{{channel_filter}}' = 'all' OR c.channel_group = '{{channel_filter}}')
GROUP BY s.session_source
ORDER BY visitors DESC"
Web Analytics,Device Breakdown Chart,device_type + sessions,device usage distribution,time_range + channel_filter,"SELECT 
  COALESCE(s.device_category, 'unknown') as device_type,
  COUNT(DISTINCT s.session_id) as sessions
FROM fact_sessions s
LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
  AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
GROUP BY s.device_category
ORDER BY sessions DESC"
Web Analytics,Device Performance Table,device_type + sessions + percentage,device metrics with icons,time_range + channel_filter,"WITH device_sessions AS (
  SELECT 
    COALESCE(s.device_category, 'unknown') as device_type,
    COUNT(DISTINCT s.session_id) as sessions
  FROM fact_sessions s
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE s.session_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
  GROUP BY s.device_category
)
SELECT 
  device_type,
  sessions,
  ROUND((sessions::NUMERIC / SUM(sessions) OVER ()) * 100, 2) as percentage
FROM device_sessions
ORDER BY sessions DESC"
Web Analytics,Page Performance Table,page_url + page_title + page_views + unique_visitors + avg_time_on_page + bounce_rate,top performing pages analysis,time_range + channel_filter,"WITH page_data AS (
  SELECT 
    e.page_location as page_url,
    e.page_title as page_title,
    COUNT(*) as page_views,
    COUNT(DISTINCT e.user_pseudo_id) as unique_visitors,
    AVG(e.engagement_time_msec / 1000.0) as avg_time_on_page,
    COUNT(CASE WHEN s.is_bounced_session THEN 1 END)::NUMERIC / NULLIF(COUNT(DISTINCT s.session_id), 0) * 100 as bounce_rate
  FROM fact_events e
  INNER JOIN fact_sessions s ON e.user_pseudo_id = s.user_pseudo_id 
    AND e.event_date = s.session_date
  LEFT JOIN dim_channels c ON s.session_source_medium = c.channel_id
  WHERE e.event_name = 'page_view'
    AND e.event_date >= CURRENT_DATE - INTERVAL '{{time_range}}'
    AND (c.channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')
  GROUP BY e.page_location, e.page_title
)
SELECT 
  page_url,
  COALESCE(page_title, page_url) as page_title,
  page_views,
  unique_visitors,
  ROUND(avg_time_on_page, 2) as avg_time_on_page,
  ROUND(bounce_rate, 2) as bounce_rate
FROM page_data
ORDER BY page_views DESC
LIMIT 20"

Common Filter Options,Time Range,start_date + end_date,"7d/30d/90d/1y/all time ranges, custom date range (Customer Analytics only)",applied to all queries,"-- Time range filter is implemented in each query using:
-- WHERE date_field >= CURRENT_DATE - INTERVAL '{{time_range}}'
-- Where {{time_range}} can be: '7 days', '30 days', '90 days', '1 year', or custom range"
Common Filter Options,Channel Filter,channel_name,"all/organic/direct/paid-social/email/referral/paid-search",applied to most queries,"-- Channel filter is implemented in each query using:
-- AND (channel_group = '{{channel_filter}}' OR '{{channel_filter}}' = 'all')"
Common Filter Options,Segment Filter,customer_segment,"all/vip/regular/sample-convert/sample-only (Customer Analytics only)",applied to customer queries,"-- Segment filter is implemented in customer queries using:
-- AND (customer_segment = '{{segment}}' OR '{{segment}}' = 'all')"
Common Filter Options,Cohort Filter,cohort_month,"all/specific months like 2024-01 (Customer Analytics only)",applied to customer queries,"-- Cohort filter is implemented in customer queries using:
-- AND (DATE_TRUNC('month', first_order_date)::TEXT = '{{cohort}}' OR '{{cohort}}' = 'all')"
Common Filter Options,Category Filter,product_category,"all/skincare/haircare/bodycare/samples (Revenue Analytics only)",applied to revenue queries,"-- Category filter is implemented in revenue queries using:
-- AND (product_type = '{{category}}' OR '{{category}}' = 'all')"
Common Filter Options,Order Type Filter,order_type,"all/full-price/sample/subscription (Revenue Analytics only)",applied to revenue queries,"-- Order type filter is implemented in revenue queries using:
-- AND (order_value_category = '{{order_type}}' OR '{{order_type}}' = 'all')"
Common Filter Options,Attribution Model Filter,attribution_model,"all/first-click/last-click/linear/time-decay (Marketing only)",applied to marketing queries,"-- Attribution model filter is simplified in marketing queries using:
-- AND ('{{attribution_model}}' = 'all' OR '{{attribution_model}}' = 'last-click')"
Common Filter Options,Campaign Filter,campaign_name,"all/brand/product/retargeting/lookalike (Marketing only)",applied to marketing queries,"-- Campaign filter is implemented in marketing queries using:
-- AND (campaign_name = '{{campaign}}' OR '{{campaign}}' = 'all')"